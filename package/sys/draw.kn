+const white: int :: 16#FFFFFFFF
+const black: int :: 16#FF000000

+func [d0001.knd, _target] target(drawCtrl: wnd@Draw)
end func

+func [d0001.knd, _render] render(fps: int)
end func

+func [d0001.knd, _cnt] cnt(): int
end func

+func [d0001.knd, _viewport] viewport(x: float, y: float, w: float, h: float)
end func

+func [d0001.knd, _resetViewport] resetViewport()
end func

+func [d0001.knd, _depth] depth(test: bool, write: bool)
end func

+enum Blend
	none
	alpha
	add
	sub
	mul
end enum

+func [d0001.knd, _blend] blend(kind: @Blend)
end func

+enum Sampler
	point
	linear
end enum

+func [d0001.knd, _sampler] sampler(kind: @Sampler)
end func

+func [d0001.knd, _clearColor] clearColor(color: int)
end func

+func [d0001.knd, _tri] tri(x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, color: int)
end func

+func [d0001.knd, _line] line(x1: float, y1: float, x2: float, y2: float, color: int)
end func

+func [d0001.knd, _rect] rect(x: float, y: float, w: float, h: float, color: int)
end func

+func [d0001.knd, _rectLine] rectLine(x: float, y: float, w: float, h: float, color: int)
end func

+func [d0001.knd, _circle] circle(x: float, y: float, radiusX: float, radiusY: float, color: int)
end func

+class Tex()
	*func [d0001.knd, _texDtor, _force] _dtor()
	end func

	*func [_force] _copy(): kuin@Class
		throw 16#E9170005
	end func

	*func [_force] _toBin(): []bit8
		throw 16#E9170005
	end func

	*func [_force] _fromBin(bin: []bit8, idx: &int): kuin@Class
		throw 16#E9170005
	end func

	+func [d0001.knd, _texDraw] draw(dstX: float, dstY: float, srcX: float, srcY: float, srcW: float, srcH: float, color: int)
	end func

	+func [d0001.knd, _texDrawScale] drawScale(dstX: float, dstY: float, dstW: float, dstH: float, srcX: float, srcY: float, srcW: float, srcH: float, color: int)
	end func

	+func [d0001.knd, _texDrawRot] drawRot(dstX: float, dstY: float, dstW: float, dstH: float, srcX: float, srcY: float, srcW: float, srcH: float, centerX: float, centerY: float, angle: float, color: int)
	end func

	var size: int
	var tex: int
	var view: int
end class

+func [d0001.knd, _makeTex, _make_instance] makeTex(me2: @Tex, path: []char): @Tex
end func

+func [d0001.knd, _makeTexEvenArgb, _make_instance] makeTexEvenArgb(me2: @Tex, a: float, r: float, g: float, b: float): @Tex
end func

+func [d0001.knd, _makeTexEvenColor, _make_instance] makeTexEvenColor(me2: @Tex, color: int): @Tex
end func

+class Font()
	*func [d0001.knd, _fontDtor, _force] _dtor()
	end func

	*func [_force] _copy(): kuin@Class
		throw 16#E9170005
	end func

	*func [_force] _toBin(): []bit8
		throw 16#E9170005
	end func

	*func [_force] _fromBin(bin: []bit8, idx: &int): kuin@Class
		throw 16#E9170005
	end func

	+func [d0001.knd, _fontDraw] draw(dstX: float, dstY: float, text: []char, color: int)
	end func

	var tex: int
	var view: int
	var cellSize: int
	var cellSizeAligned: int
	var advance: int
	var proportional: int
	var font: int
	var charMap: int
	var cntMap: int
	var pixel: int
	var bitmap: int
	var dc: int
	var glyphWidth: int
end class

+func [d0001.knd, _makeFont, _make_instance] makeFont(me2: @Font, fontName: []char, size: int, bold: bool, italic: bool, strong: bool, proportional: bool, advance: float): @Font
end func

+func [d0001.knd, _camera] camera(eyeX: float, eyeY: float, eyeZ: float, atX: float, atY: float, atZ: float, upX: float, upY: float, upZ: float)
end func

+func [d0001.knd, _proj] proj(fovy: float, aspectX: float, aspectY: float, nearZ: float, farZ: float)
end func

+class Obj()
	*func [d0001.knd, _objDtor, _force] _dtor()
	end func

	*func [_force] _copy(): kuin@Class
		throw 16#E9170005
	end func

	*func [_force] _toBin(): []bit8
		throw 16#E9170005
	end func

	*func [_force] _fromBin(bin: []bit8, idx: &int): kuin@Class
		throw 16#E9170005
	end func

	+func [d0001.knd, _objDraw] draw(diffuse: @Tex, specular: @Tex, normal: @Tex, element: int, frame: float)
	end func

	+func [d0001.knd, _objMtx] mtx(mtx_: []float, normMtx: []float)
	end func

	+func [d0001.knd, _objPos] pos(scaleX: float, scaleY: float, scaleZ: float, rotX: float, rotY: float, rotZ: float, transX: float, transY: float, transZ: float)
	end func

	+func [d0001.knd, _objLook] look(x: float, y: float, z: float, atX: float, atY: float, atZ: float, upX: float, upY: float, upZ: float, fixUp: bool)
	end func

	+func [d0001.knd, _objLookCamera] lookCamera(x: float, y: float, z: float, upX: float, upY: float, upZ: float, fixUp: bool)
	end func

	var elementNum: int
	var elementKinds: int
	var elements: int
	var mtx1: int
	var mtx2: int
	var mtx3: int
	var mtx4: int
	var mtx5: int
	var mtx6: int
	var mtx7: int
	var mtx8: int
	var normMtx1: int
	var normMtx2: int
	var normMtx3: int
	var normMtx4: int
	var normMtx5: int
	var normMtx6: int
	var normMtx7: int
	var normMtx8: int
end class

+func [d0001.knd, _makeObj, _make_instance] makeObj(me2: @Obj, path: []char): @Obj
end func

+func [d0001.knd, _ambLight] ambLight(topR: float, topG: float, topB: float, bottomR: float, bottomG: float, bottomB: float)
end func

+func [d0001.knd, _dirLight] dirLight(atX: float, atY: float, atZ: float, r: float, g: float, b: float)
end func

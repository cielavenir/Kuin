+enum Origin
	head
	cur
	tail
end enum

+class Reader()
	*func [d0000.knd, _streamDtor, _force] _dtor()
	end func

	*func [_force] _copy(): kuin@Class
		throw 16#E9170005
	end func

	*func [_force] _toBin(): []bit8
		throw 16#E9170005
	end func

	*func [_force] _fromBin(bin: []bit8, idx: &int): kuin@Class
		throw 16#E9170005
	end func

	+func [d0000.knd, _streamFin] fin()
	end func

	+func [d0000.knd, _streamSetPos] setPos(origin: @Origin, pos: int)
	end func

	+func [d0000.knd, _streamGetPos] getPos(): int
	end func

	+func [d0000.knd, _streamDelimiter] delimiter(delimiters: []char)
	end func

	+func [d0000.knd, _streamRead] read(size: int): []bit8
	end func

	+func [d0000.knd, _streamReadLetter] readLetter(): char
	end func

	+func [d0000.knd, _streamReadInt] readInt(): int
	end func

	+func [d0000.knd, _streamReadFloat] readFloat(): float
	end func

	+func [d0000.knd, _streamReadChar] readChar(): char
	end func

	+func [d0000.knd, _streamReadStr] readStr(): []char
	end func

	+func [d0000.knd, _streamReadLine] readLine(): []char
	end func

	+func [d0000.knd, _streamFileSize] fileSize(): int
	end func

	+func [d0000.knd, _streamTerm] term(): bool
	end func

	var handle: int
	var delimiterNum: int
	var delimiters: int
	var fileSize_: int
end class

+class Writer()
	*func [d0000.knd, _streamDtor, _force] _dtor()
	end func

	*func [_force] _copy(): kuin@Class
		throw 16#E9170005
	end func

	*func [_force] _toBin(): []bit8
		throw 16#E9170005
	end func

	*func [_force] _fromBin(bin: []bit8, idx: &int): kuin@Class
		throw 16#E9170005
	end func

	+func [d0000.knd, _streamFin] fin()
	end func

	+func [d0000.knd, _streamSetPos] setPos(origin: @Origin, pos: int)
	end func

	+func [d0000.knd, _streamGetPos] getPos(): int
	end func

	+func [d0000.knd, _streamWrite] write(bin: []bit8)
	end func

	+func [d0000.knd, _streamWriteInt] writeInt(n: int)
	end func

	+func [d0000.knd, _streamWriteFloat] writeFloat(n: float)
	end func

	+func [d0000.knd, _streamWriteChar] writeChar(n: char)
	end func

	+func [d0000.knd, _streamWriteStr] writeStr(n: []char)
	end func

	var handle: int
	var delimiterNum: int
	var delimiter: int
	var fileSize_: int
end class

+func [d0000.knd, _makeReader, _make_instance] makeReader(me2: @Reader, path: []char): @Reader
end func

+func [d0000.knd, _makeWriter, _make_instance] makeWriter(me2: @Writer, path: []char, append: bool): @Writer
end func

+enum SysDir
	desktop :: 16#00
	fonts :: 16#14
	appData :: 16#1A
	windows :: 16#24
	system32 :: 16#25
	programFiles :: 16#26
end enum

+func [d0000.knd, _makeDir] makeDir(path: []char): bool
end func

+func [d0000.knd, _forEachDir] forEach(path: []char, recursion: bool, callback: func<([]char, bool, kuin@Class): bool>, data: kuin@Class): bool
end func

+func [d0000.knd, _existPath] exist(path: []char): bool
end func

+func [d0000.knd, _delDir] delDir(path: []char): bool
end func

+func [d0000.knd, _delFile] delFile(path: []char): bool
end func

+func [d0000.knd, _copyDir] copyDir(dst: []char, src: []char): bool
end func

+func [d0000.knd, _copyFile] copyFile(dst: []char, src: []char): bool
end func

+func [d0000.knd, _moveFile] moveFile(dst: []char, src: []char): bool
end func

+func [d0000.knd, _dir] dir(path: []char): []char
end func

+func [d0000.knd, _fileName] fileName(path: []char): []char
end func

+func [d0000.knd, _delExt] delExt(path: []char): []char
end func

+func [d0000.knd, _sysDir] sysDir(kind: @SysDir): []char
end func

+func [d0000.knd, _exeDir] exeDir(): []char
end func

+func [d0000.knd, _fileSize] fileSize(path: []char): int
end func


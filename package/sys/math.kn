func [d0003.knd, _init] _init()
end func

+func [d0003.knd, _gcd] gcd(a: int, b: int): int
end func

+func [d0003.knd, _lcm] lcm(a: int, b: int): int
end func

+func [d0003.knd, _modPow] modPow(value: int, exponent: int, modulus: int): int
end func

+func [d0003.knd, _modMul] modMul(a: int, b: int, modulus: int): int
end func

+func [d0003.knd, _prime] prime(n: int): bool
end func

+func [d0003.knd, _primeFactors] primeFactors(n: int): []int
end func

+func [d0003.knd, _gamma] gamma(n: float): float
end func

+func [d0003.knd, _fact] fact(n: float): float
end func

+func [d0003.knd, _factInt] factInt(n: int): int
end func

+class Mat()
	*func [d0003.knd, _matDtor, _force] _dtor()
	end func

	*func [_force] _copy(): kuin@Class
		throw 16#E9170005
	end func

	*func [_force] _toBin(): []bit8
		throw 16#E9170005
	end func

	*func [_force] _fromBin(bin: []bit8, idx: &int): kuin@Class
		throw 16#E9170005
	end func

	var row: int
	var col: int
	var buf: int
end class

+func [d0003.knd, _makeMat, _make_instance] makeMat(me2: @Mat, row: int, col: int): @Mat
end func

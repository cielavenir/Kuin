var wndCompletion: wnd@Wnd
var wndCompletionEditHint: wnd@EditMulti
var wndCompletionListKeywords: wnd@List
var wndCompletionEditFunc: wnd@EditMulti
var wndCompletionSrc: []char
var wndCompletionRow: int
var wndCompletionCursor: int
var wndCompletionHintPos: \src@Pos

+func show(src: []char, row: int, hint: []char, funcHint: []char, fast: bool)
	if(@wndCompletion <>& null)
		do @close()
		assert @wndCompletion =& null
	end if
	var x: int
	var y: int
	do wnd@getCaretPos(&x, &y)
	if(x < 0 | y < 0)
		ret
	end if
	var x2: int
	var y2: int
	do \form@drawEditor.getPosScreen(&x2, &y2, &, &)

	do @wndCompletionSrc :: src
	do @wndCompletionRow :: row
	do @wndCompletion :: wnd@makeWnd(\form@wndMain, (%popup $ wnd@WndStyle).or(%layered), 250, 100, null)
	do @wndCompletion.setPos(x + x2, y + y2 + \common@cellHeight, 250, fast ?(100, 30))
	do @wndCompletion.setAlpha(230)
	do @wndCompletion.onClose :: wndCompletionOnClose
	do @wndCompletionEditHint :: wnd@makeEditMulti(@wndCompletion, 0, 0, 250, 30, %fix, %fix)
	do @wndCompletionEditHint.readonly(true)
	if(fast)
		do @wndCompletionListKeywords :: wnd@makeList(@wndCompletion, 0, 30, 250, 48, %fix, %fix)
		do @wndCompletionListKeywords.onSel :: @wndCompletionListKeywordsOnSel
		do @wndCompletionListKeywords.onMouseDoubleClick :: @wndCompletionListKeywordsOnMouseDoubleClick
		do @wndCompletionListKeywords.setRedraw(false)
		var best: int :: \dll@getKeywords(src, row, hint, getKeywordsCallback)
		if(@wndCompletionListKeywords.len() = 0)
			do @close()
			ret
		end if
		do @wndCompletionListKeywords.setRedraw(true)
		do @wndCompletionListKeywords.setSel(@wndCompletionListKeywords.len() - 1)
		do @wndCompletionListKeywords.setSel(best)
		do @wndCompletionCursor :: best = -1 ?(0, best)
		do @wndCompletionListKeywordsOnSel(@wndCompletionListKeywords)
		do @wndCompletionListKeywords.setSel(-1)

		do @wndCompletionEditFunc :: wnd@makeEditMulti(@wndCompletion, 0, 70, 250, 30, %fix, %fix)
		do @wndCompletionEditFunc.readonly(true)
		if(^funcHint = 0)
			do @wndCompletionEditFunc.setText(\common@langEn ?("Select...Up/Down, To Definition...F12\nDecide...Enter, Cancel...Esc, Transmit...Ctrl", "選択...Up/Down, 定義元へ...F12\n確定...Enter, キャンセル...Esc, 透過...Ctrl"))
		else
			do @wndCompletionEditFunc.setText(funcHint)
		end if
	else
		do @wndCompletionHintPos :: #\src@Pos
		var hintSrc: []char
		var wordHint: []char :: \dll@getHint(0, @wndCompletionSrc, @wndCompletionRow, hint, &hintSrc, &@wndCompletionHintPos.row, &@wndCompletionHintPos.col)
		if(hintSrc =& null)
			do @wndCompletionHintPos :: null
		else
			do @wndCompletionHintPos.src :: ##hintSrc
		end if
		if(wordHint =& null)
			do @wndCompletionHintPos :: null
			do @close()
			ret
		else
			do @wndCompletionEditHint.setText(wordHint)
		end if
	end if

	do \form@focusDrawEditor()

	func wndCompletionOnClose(wnd: wnd@Wnd): bool
		do @wndCompletion :: null
		do @wndCompletionEditHint :: null
		do @wndCompletionListKeywords :: null
		do @wndCompletionEditFunc :: null
		do @wndCompletionSrc :: null
		do @wndCompletionRow :: 0
		do @wndCompletionCursor :: -1
		do @wndCompletionHintPos :: null
		ret true
	end func

	func getKeywordsCallback(keyword: []char)
		do @wndCompletionListKeywords.add(keyword)
	end func
end func

+func close()
	if(@wndCompletion <>& null)
		do @wndCompletion.close()
	end if
end func

+func wndCompletionListKeywordsOnSel(wnd: wnd@List)
	var sel: int :: wnd.getSel()
	if(sel = -1)
		do @wndCompletionEditHint.setText("")
	else
		do @wndCompletionHintPos :: #\src@Pos
		var hintSrc: []char
		var wordHint: []char :: \dll@getHint(0, @wndCompletionSrc, @wndCompletionRow, @wndCompletionListKeywords.getText(sel), &hintSrc, &@wndCompletionHintPos.row, &@wndCompletionHintPos.col)
		if(hintSrc =& null)
			do @wndCompletionHintPos :: null
		else
			do @wndCompletionHintPos.src :: ##hintSrc
		end if
		if(wordHint =& null)
			do @wndCompletionHintPos :: null
		else
			do @wndCompletionEditHint.setText(wordHint)
		end if
	end if
end func

func wndCompletionListKeywordsOnMouseDoubleClick(wnd: wnd@List)
	if(\src@curDoc =$ \doc_src@DocSrc)
		if((\src@curDoc $ \doc_src@DocSrc).complement())
			do \auxiliary@resetDirtyHint()
		end if
	end if
end func

+func displayed(): bool
	ret @wndCompletion <>& null
end func

+func setAlpha(alpha: int)
	do @wndCompletion.setAlpha(alpha)
end func

+func focused(): bool
	ret @wndCompletion <>& null & @wndCompletion.focusedWnd()
end func

+func moveCursorUp(): bool
	if(@wndCompletionListKeywords <>& null & @wndCompletionListKeywords.len() <> 0)
		var sel: int :: @wndCompletionListKeywords.getSel()
		if(sel = -1)
			do sel :: @wndCompletionCursor
		elif(sel <> 0)
			do sel :- 1
		end if
		do @wndCompletionListKeywords.setSel(sel)
		do @wndCompletionListKeywordsOnSel(@wndCompletionListKeywords)
		ret true
	end if
	ret false
end func

+func moveCursorDown(): bool
	if(@wndCompletionListKeywords <>& null)
		var len: int :: @wndCompletionListKeywords.len()
		if(len <> 0)
			var sel: int :: @wndCompletionListKeywords.getSel()
			if(sel = -1)
				do sel :: @wndCompletionCursor
			elif(sel <> len - 1)
				do sel :+ 1
			end if
			do @wndCompletionListKeywords.setSel(sel)
			do @wndCompletionListKeywordsOnSel(@wndCompletionListKeywords)
		end if
		ret true
	end if
	ret false
end func

+func getSelWord(): []char
	if(@wndCompletion =& null | @wndCompletionListKeywords =& null)
		ret null
	end if
	var sel: int :: @wndCompletionListKeywords.getSel()
	if(sel = -1)
		ret null
	end if
	ret @wndCompletionListKeywords.getText(sel)
end func

+func getDefinitionPos(): \src@Pos
	ret @wndCompletionHintPos
end func

+func getCompletionSrc(): []char
	ret @wndCompletionSrc
end func

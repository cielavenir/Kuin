var snippets: list<@Snippet>

class Snippet()
	+var name: []char
	+var removable: bool
	+var code: []char
end class

+func load()
	do @snippets :: #list<@Snippet>
	do loadXml(file@exeDir() ~  "sys/snippet.knd", false)
	do loadXml(file@exeDir() ~  "sys/snippet_user.knd", true)

	func loadXml(path: []char, removable: bool)
		try
			var prop: xml@Xml :: xml@makeXml(path)
			if(prop =& null)
				ret
			end if
			var root: xml@Node :: prop.root()
			var snippets: xml@Node :: root.findChild("snippets")
			var node: xml@Node :: snippets.firstChild()
			while(node <>& null)
				var item: @Snippet :: #@Snippet
				do item.name :: node.findChild("name").getValue()
				if(item.name =& null)
					do item.name :: ""
				end if
				do item.removable :: removable
				do item.code :: node.findChild("code").getValue()
				if(item.code =& null)
					do item.code :: ""
				end if
				do @snippets.add(item)
				do node :: node.next()
			end while
		catch
		end try
	end func
end func

func save()
	do saveXml(file@exeDir() ~  "sys/snippet.knd", false)
	do saveXml(file@exeDir() ~  "sys/snippet_user.knd", true)

	func saveXml(path: []char, removable: bool)
		do file@delFile(path)
		var prop: xml@Xml :: xml@makeXmlEmpty()
		var root: xml@Node :: prop.root()
		var snippets: xml@Node :: root.addChild("snippets")
		do @snippets.head()
		while(!@snippets.term())
			var snippet: @Snippet :: @snippets.get()
			if(snippet.removable = removable)
				var node: xml@Node :: snippets.addChild("snippet")
				do node.addChild("name").setValue(snippet.name)
				do node.addChild("code").setValue(snippet.code)
			end if
			do @snippets.next()
		end while
		do prop.save(path, false)
	end func
end func

+func add(code: []char)
	if(code =& null)
		ret
	end if

	var name: []char :: wndex@inputBox(\form@wndMain, \common@langEn ?("Input the snippet name.", "スニペットの名前を入力してください。"), \common@title, null, validate)
	if(name <>& null)
		do name :: name.trim()
		if(name <> "")
			var snippet: @Snippet :: #@Snippet
			do snippet.name :: name
			do snippet.removable :: true
			do snippet.code :: code
			do @snippets.add(snippet)
			do @save()
		end if
	end if

	func validate(name: []char): bool
		do @snippets.head()
		while(!@snippets.term())
			if(@snippets.get().name = name)
				ret false
			end if
			do @snippets.next()
		end while
		ret true
	end func
end func

+func updateList(list_: wnd@List)
	do @snippets.head()
	while(!@snippets.term())
		var snippet: @Snippet :: @snippets.get()
		do list_.add((snippet.removable ?("\\", "")) ~ snippet.name)
		do @snippets.next()
	end while
end func

+func getCode(name: []char): []char
	if(^name >= 1 & name[0] = '\\')
		do name :: name.sub(1, -1)
	end if
	var snippet: @Snippet :: null
	do @snippets.head()
	while loop(!@snippets.term())
		var item: @Snippet :: @snippets.get()
		if(item.name = name)
			do snippet :: item
			break loop
		end if
		do @snippets.next()
	end while
	if(snippet =& null)
		ret null
	end if
	var result: wnd@MsgBoxResult :: wnd@msgBox(\form@wndMain, (\common@langEn ?("Insert the following code?", "以下のコードを挿入しますか？")) ~ "\n\n" ~ snippet.name ~ "\n\n" ~ snippet.code, \common@title, %question, %yesNoCancel)
	switch(result)
	case %yes
		ret snippet.code
	case %no
		if(!snippet.removable)
			ret null
		end if
		do result :: wnd@msgBox(\form@wndMain, (\common@langEn ?("Delete [\{snippet.name}] snippet?", "スニペット[\{snippet.name}]を削除しますか？")), \common@title, %question, %yesNoCancel)
		if(result = %yes)
			do @snippets.head()
			while loop(!@snippets.term())
				if(@snippets.get().name = name)
					do @snippets.del()
					skip loop
				end if
				do @snippets.next()
			end while
			do @save()
		end if
		ret null
	case %cancel
		ret null
	end switch
end func

var x: int :: 5678

func main()
	for(1, 3)
		block
			var time: int :: 1485120859

			var year: int
			var month: int
			var day: int
			var hour: int
			var minute: int
			var second: int
			var dayOfWeek: int :: lib@intToDate(time, &year, &month, &day, &hour, &minute, &second)
			do cui@print(year.toStr() ~ ", " ~ month.toStr() ~ ", " ~ day.toStr() ~ ", " ~ hour.toStr() ~ ", " ~ minute.toStr() ~ ", " ~ second.toStr() ~ ", " ~ dayOfWeek.toStr())
			var time2: int :: lib@dateToInt(year, month, day, hour, minute, second)
			do cui@print(time2.toStr() ~ ", " ~ (time = time2).toStr())
		end block

		block
			var i: int :: 1234
			var f: float :: 3.14159
			var s: []char :: "abc"
			do cui@print("i=\{i}, f=\{f}, s=\{s}, @x=\{@x}.")
		end block

		block
			do cui@print(["ab", "cd", "ef"].join("xx"))
		end block

		block
			do cui@print(lib@intMax.toStr() ~ ", " ~ lib@intMin.toStr())
		end block

		block
			do cui@print((0x12b8).endian().toStr())
			do cui@print((0x1234b16).endian().toStr())
			do cui@print((0x12345678b32).endian().toStr())
			do cui@print((0x12345678ABCDEF01b64).endian().toStr())
		end block

		block
			do cui@print("abcdefg".findBin('f').toStr())
			do cui@print("abcdefg".findBin('h').toStr())
		end block

		block
			var hs: []bit8 :: lib@hash("abc" $> []bit8)
			do cui@print((^hs).toStr())
			for i(0, ^hs - 1)
				do cui@print(hs[i].toStr())
			end for
		end block

		block
			var key: []bit8 :: #[32]bit8
			for i(0, 31)
				do key[i] :: i $ bit8
			end for
			var before: []bit8 :: #[14]bit8
			for i(0, 13)
				do before[i] :: (i * 0x11) $ bit8
			end for
			var coded: []bit8 :: lib@encrypt(before, key)
			do cui@print((^coded).toStr())
			for i(0, ^coded - 1)
				do cui@print(coded[i].toStr())
			end for
			var after: []bit8 :: lib@decrypt(coded, key)
			do cui@print((^after).toStr())
			for i(0, ^after - 1)
				do cui@print(after[i].toStr())
			end for
		end block
	end for
end func

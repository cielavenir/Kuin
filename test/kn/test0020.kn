func main()
	block
		var server: net@TcpServer :: net@makeTcpServer(1024)
		do lib@sleep(200)
		var client: net@Tcp :: net@makeTcpClient("localhost", 1024)
		do lib@sleep(200)
		var client2: net@Tcp :: server.get()
		do cui@print(client.connecting().toStr() ~ ", " ~ client2.connecting().toStr())
		for i(0, 2)
			block
				var a: []bit8 :: "abcd" $> []bit8
				do client.send(a)
				do lib@sleep(200)
				var b: []bit8 ::  client2.receive(^a)
				do cui@print(b $< []char)
			end block
			block
				var a: []bit8 :: "efgi" $> []bit8
				do client2.send(a)
				do lib@sleep(200)
				var b: []bit8 ::  client.receive(^a)
				do cui@print(b $< []char)
			end block
		end for
		do client.fin()
		do lib@sleep(200)
		do cui@print(client.connecting().toStr() ~ ", " ~ client2.connecting().toStr())
	end block

	block
		for i(0, 10)
			var l: float :: lib@lerp(5.0, 10.0, (i $ float) / 10.0)
			var qi: float :: lib@qerp(5.0, 10.0, true, (i $ float) / 10.0)
			var qo: float :: lib@qerp(5.0, 10.0, false, (i $ float) / 10.0)
			var c: float :: lib@cerp(5.0, 10.0, (i $ float) / 10.0)
			do cui@print("\{l}, \{qi}, \{qo}, \{c}")
		end for
		var pos: []float :: [4.0, 3.0, 5.0, 10.0]
		for i(0, 30, 2)
			do cui@print(lib@hermite(pos, (i $ float) / 10.0).toStr())
		end for
	end block

	if(false)
		do cui@print("No")
	end if
	
	if(true)
		do cui@print("Yes")
	end if

	if(false)
		var s: []char :: "A"
		do cui@print(s)
	elif(true)
		var s: []char :: "B"
		do cui@print(s)
		if(false)
			var t: []char :: "C"
			do cui@print(t)
		elif(false)
			var t: []char :: "D"
			do cui@print(t)
		else
			var t: []char :: "E"
			do cui@print(t)
		end if
	else
		var s: []char :: "F"
		do cui@print(s)
	end if

	for i(0, 1)
		switch(i)
		case 0
			var n: int :: 2
			do cui@print(n.toStr())
		case 1
			var n: int :: 3
			do cui@print(n.toStr())
		end switch
	end for
end func

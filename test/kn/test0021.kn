func main()
	for(1, 3)
		block
			var a: list<int> :: #list<int>
			do a.add(3)
			do a.add(5)
			do a.head()
			if(a.find(3))
				do cui@print(a.get().toStr())
			else
				do cui@print("Not found.")
			end if
			if(a.find(5))
				do cui@print(a.get().toStr())
			else
				do cui@print("Not found.")
			end if
			if(a.find(7))
				do cui@print(a.get().toStr())
			else
				do cui@print("Not found.")
			end if
			do a.tail()
			if(a.findLast(3))
				do cui@print(a.get().toStr())
			else
				do cui@print("Not found.")
			end if
			if(a.findLast(5))
				do cui@print(a.get().toStr())
			else
				do cui@print("Not found.")
			end if
			if(a.findLast(7))
				do cui@print(a.get().toStr())
			else
				do cui@print("Not found.")
			end if
		end block

		block
			do cui@print(math@knapsack([2, 1, 3, 2], [3, 2, 4, 2], 5, false).toStr())
			do cui@print(math@knapsack([3, 4, 2], [4, 5, 3], 7, true).toStr())
		end block

		block
			var d: []int :: math@dijkstra(7, [0, 1, 0, 2, 1, 2, 1, 3, 2, 3, 1, 4, 4, 5, 3, 5, 4, 6, 5, 6], [1, 0, 2, 0, 2, 1, 3, 1, 3, 2, 4, 1, 5, 4, 5, 3, 6, 4, 6, 5], [2, 2, 5, 5, 4, 4, 6, 6, 2, 2, 10, 10, 3, 3, 1, 1, 5, 5, 9, 9], 0)
			for i(0, ^d - 1)
				do cui@print(d[i].toStr())
			end for
		end block

		block
			var d: []int :: math@bellmanFord(7, [0, 1, 0, 2, 1, 2, 1, 3, 2, 3, 1, 4, 4, 5, 3, 5, 4, 6, 5, 6], [1, 0, 2, 0, 2, 1, 3, 1, 3, 2, 4, 1, 5, 4, 5, 3, 6, 4, 6, 5], [2, 2, 5, 5, 4, 4, 6, 6, 2, 2, 10, 10, 3, 3, 1, 1, 5, 5, 9, 9], 0)
			for i(0, ^d - 1)
				do cui@print(d[i].toStr())
			end for
		end block

		block
			var d: [][]int :: math@floydWarshall(7, [0, 1, 0, 2, 1, 2, 1, 3, 2, 3, 1, 4, 4, 5, 3, 5, 4, 6, 5, 6], [1, 0, 2, 0, 2, 1, 3, 1, 3, 2, 4, 1, 5, 4, 5, 3, 6, 4, 6, 5], [2, 2, 5, 5, 4, 4, 6, 6, 2, 2, 10, 10, 3, 3, 1, 1, 5, 5, 9, 9])
			for i(0, ^d - 1)
				do cui@print(d[0][i].toStr())
			end for
		end block
	end for
end func
